{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","console","log","onerror","e","target","error","negociacoes","cursor","openCursor","current","result","data","value","push","_data","_quantidade","_valor","continue","name","clear"],"mappings":";;;;;;;;;;;;;;;AAAQA,sB,uBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEKC,a;AACT,uCAAYC,UAAZ,EAAwB;AAAA;;AACpB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;6CAEQC,U,EAAY;AAAA;;AACjB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,MAAKP,MAFR,EAGTQ,GAHS,CAGLP,UAHK,CAAd;;AAMAI,oCAAQI,SAAR,GAAoB,aAAK;AACrBC,wCAAQC,GAAR,CAAY,oCAAZ;AACAR;AACH,6BAHD;;AAKAE,oCAAQO,OAAR,GAAkB,aAAK;AACnBF,wCAAQC,GAAR,CAAYE,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,uCAAP;AACH,6BAHD;AAIH,yBAhBM,CAAP;AAiBH;;;iDAEY;AAAA;;AACT,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIY,cAAc,EAAlB;AACA,gCAAMC,SAAS,OAAKlB,WAAL,CACVO,WADU,CACE,CAAC,OAAKN,MAAN,CADF,EACiB,WADjB,EAEVO,WAFU,CAEE,OAAKP,MAFP,EAGVkB,UAHU,EAAf;;AAMAD,mCAAOR,SAAP,GAAmB,aAAK;AACpB,oCAAMU,UAAUN,EAAEC,MAAF,CAASM,MAAzB;;AAEA,oCAAID,OAAJ,EAAa;AACT,wCAAME,OAAOF,QAAQG,KAArB;;AAEAN,gDAAYO,IAAZ,CAAiB,IAAI3B,UAAJ,CAAeyB,KAAKG,KAApB,EAA2BH,KAAKI,WAAhC,EAA6CJ,KAAKK,MAAlD,CAAjB;;AAEAP,4CAAQQ,QAAR;AACH,iCAND,MAMO;AACH;AACAxB,4CAAQa,WAAR;AACH;AACJ,6BAbD;;AAeAC,mCAAOL,OAAP,GAAiB,aAAK;AAClBR,uCAAOS,EAAEC,MAAF,CAASC,KAAT,CAAea,IAAtB;AACH,6BAFD;AAGH,yBA1BM,CAAP;AA2BH;;;iDAEY;AAAA;;AACT,+BAAO,IAAI1B,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAMC,UAAU,OAAKN,WAAL,CACXO,WADW,CACC,CAAC,OAAKN,MAAN,CADD,EACgB,WADhB,EAEXO,WAFW,CAEC,OAAKP,MAFN,EAGX6B,KAHW,EAAhB;;AAKAxB,oCAAQI,SAAR,GAAoB,aAAK;AACrBN,wCAAQ,uCAAR;AACH,6BAFD;;AAIAE,oCAAQO,OAAR,GAAkB,aAAK;AACnBF,wCAAQC,GAAR,CAAYE,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,uCAAP;AACH,6BAHD;AAIH,yBAdM,CAAP;AAeH","file":"NegociacaoDao.js","sourcesContent":["import {Negociacao} from '../models/Negociacao.js';\n\nexport class NegociacaoDao {\n    constructor(connection) {\n        this._connection = connection;\n        this._store = 'negociacoes';\n    }\n\n    adiciona(negociacao) {\n        return new Promise((resolve, reject) => {\n            let request = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .add(negociacao);\n\n\n            request.onsuccess = e => {\n                console.log('Negociação adicionada com sucesso!');\n                resolve();\n            }\n\n            request.onerror = e => {\n                console.log(e.target.error);\n                reject('Não foi possivel incluir a negociacao');\n            }\n        })\n    }\n\n    listaTodos() {\n        return new Promise((resolve, reject) => {\n            let negociacoes = [];\n            const cursor = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .openCursor();\n\n\n            cursor.onsuccess = e => {\n                const current = e.target.result;\n\n                if (current) {\n                    const data = current.value;\n\n                    negociacoes.push(new Negociacao(data._data, data._quantidade, data._valor));\n\n                    current.continue();\n                } else {\n                    // return array after its filled with negociacoes\n                    resolve(negociacoes);\n                }\n            }\n\n            cursor.onerror = e => {\n                reject(e.target.error.name);\n            }\n        })\n    }\n\n    apagaTodos() {\n        return new Promise((resolve, reject) => {\n            const request = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .clear();\n\n            request.onsuccess = e => {\n                resolve('Negociações foram apagadas do indexDB');\n            }\n\n            request.onerror = e => {\n                console.log(e.target.error);\n                reject('Erro ao apagar negociações do indexDB');\n            }\n        })\n    }\n}"]}