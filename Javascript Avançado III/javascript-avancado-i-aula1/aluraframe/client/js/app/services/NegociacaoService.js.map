{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","periodo","Promise","resolve","reject","fetch","then","data","json","catch","map","Date","object","quantidade","valor","all","obtemNegociacoesServidor","negociacoes","periodos","reduce","dados","concat","dado","Error","error","negociacao","method","headers","body","JSON","stringify","response","getConnection","connection","dao","adiciona","console","log","listaTodos","daoNegociacao","apagaTodos","listaAtual","obtemNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {ConnectionFactory} from './ConnectionFactory.js'\nimport {NegociacaoDao} from '../dao/NegociacaoDao.js';\nimport {Negociacao} from '../models/Negociacao.js';\n\nexport class NegociacaoService {\n\n    static async obtemNegociacoesServidor(periodo) {\n        return new Promise((resolve, reject) => {\n            fetch(`negociacoes/${periodo}`)\n                .then(data => {\n                    return data.json();\n                })\n                .catch(() => {\n                    reject(`Erro ao importar as negociações de ${periodo}`);\n                })\n                .then(data => {\n                    resolve(data.map(object => new Negociacao(\n                        new Date(object.data),\n                        object.quantidade,\n                        object.valor)));\n                });\n        })\n    }\n\n    static async obtemNegociacoes() {\n        return Promise.all([this.obtemNegociacoesServidor('semana'),\n                this.obtemNegociacoesServidor('anterior'),\n                this.obtemNegociacoesServidor('retrasada')\n            ])\n            .then(periodos => {\n\n                let negociacoes = periodos\n                    .reduce((dados, periodo) => dados.concat(periodo), [])\n                    .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor));\n\n                return negociacoes;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n    }\n\n    static async persisteNegociacaoServidor(negociacao) {\n        return new Promise((resolve, reject) => {\n            fetch('negociacoes', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(negociacao)\n                })\n                .catch(() => {\n                    reject(`Erro ao salvar negociação no servidor.`);\n                })\n                .then(response => {\n                    resolve(response.json());\n                })\n        })\n    }\n\n    static cadastra(negociacao) {\n        return ConnectionFactory.getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação cadastrada com sucesso!')\n            .catch(error => {\n                console.log(error);\n                throw new Error('Não foi possível adicionar negociação');\n            })\n    }\n\n    static lista() {\n        return ConnectionFactory.getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.listaTodos())\n            .catch(error => {\n                console.log(error);\n                throw new Error('Não foi listar as negociações')\n            })\n    }\n\n    static apaga() {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(daoNegociacao => daoNegociacao.apagaTodos())\n            .catch(error => {\n                console.log(error);\n                throw new Error('Não foi possível apagar as negociações');\n            })\n    }\n\n    static importa(listaAtual) {\n        return this.obtemNegociacoes()\n            .then(negociacoes =>\n                negociacoes.filter(negociacao => {\n                    return !listaAtual.some(negociacaoExistente =>\n                        negociacao.isEquals(negociacaoExistente)\n                    );\n                }))\n            .catch(error => {\n                console.log(error);\n                throw new Error('Não foi possível importar as negociações');\n            })\n    }\n\n\n}"]}