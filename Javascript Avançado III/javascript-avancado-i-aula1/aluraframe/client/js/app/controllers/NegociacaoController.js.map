{"version":3,"sources":["../../app-es6/controllers/NegociacaoController.js"],"names":["currentInstance","negociacaoController","ListaNegociacoes","Mensagem","NegociacoesView","MensagemView","NegociacaoService","DateHelper","Bind","Negociacao","NegociacaoController","$","document","querySelector","bind","_inputQuantidade","_inputData","_inputValor","_ordemAtual","_listaNegociacoes","_mensagem","_init","lista","then","negociacoes","map","adiciona","negociacao","catch","console","error","setInterval","importa","event","preventDefault","_criaNegociacao","cadastra","texto","mensagem","_clearForm","apaga","esvazia","data","value","quantidade","valor","persisteNegociacaoServidor","log","coluna","inverteOrdem","ordena","a","b","textoParaData","parseInt","parseFloat","focus"],"mappings":"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","file":"NegociacaoController.js","sourcesContent":["import {ListaNegociacoes} from '../models/ListaNegociacoes.js';\nimport {Mensagem} from '../models/Mensagem.js';\nimport {NegociacoesView} from '../views/NegociacoesView.js';\nimport {MensagemView} from '../views/MensagemView.js';\nimport {NegociacaoService} from '../services/NegociacaoService.js';\nimport {DateHelper} from '../helpers/DateHelper.js';\nimport {Bind} from '../helpers/Bind.js';\nimport {Negociacao} from '../models/Negociacao.js';\n\nclass NegociacaoController {\n\n    constructor() {\n        // 'bind' method makes so that when 'querySelector' is assigned to the variable '$', its context remains the argument passed through the 'bind' function, i. e., in this case, 'this' operator refers to the 'document' not the variable '$' itself\n        let $ = document.querySelector.bind(document);\n        this._inputQuantidade = $('#quantidade');\n        this._inputData = $('#data');\n        this._inputValor = $('#valor');\n        this._ordemAtual = '';\n\n        this._listaNegociacoes = new Bind(\n            new ListaNegociacoes(),\n            new NegociacoesView($('#negociacoesView')),\n            'adiciona', 'esvazia', 'ordena', 'inverteOrdem'\n        );\n\n        this._mensagem = new Bind(\n            new Mensagem(),\n            new MensagemView($('#mensagemView')),\n            'texto'\n        );\n\n        // Initializes other objects not related to this class properties\n        this._init();\n    }\n\n    _init() {\n        // Loading data on indexDB when the constructor is called, i. e., everytime the page reloads\n        NegociacaoService\n            .lista()\n            .then(negociacoes =>\n                negociacoes.map(negociacao =>\n                    this._listaNegociacoes.adiciona(negociacao)))\n            .catch(error => console.error(error))\n\n        // Loading negociacoes from server database periodically (5s)\n        setInterval(() => {\n            this.importa();\n        }, 5000);\n    }\n\n    add(event) {\n        event.preventDefault();\n        let negociacao = this._criaNegociacao();\n\n        NegociacaoService\n            .cadastra(negociacao)\n            .then(mensagem => {\n                // Only adding to the server if it was able to add to the database\n                // 'adiciona' from NegociacaoDao returns a Promisse\n                this._listaNegociacoes.adiciona(negociacao);\n                // this._negociacoesView.update(this._listaNegociacoes);\n                this._mensagem.texto = mensagem;\n                // this._mensagemView.update(this._mensagem);\n                this._clearForm();\n            })\n            .catch(error => this._mensagem.texto = error);\n    }\n\n    apaga() {\n\n        NegociacaoService\n            .apaga()\n            .then(() => {\n                this._listaNegociacoes.esvazia();\n                // this._negociacoesView.update(this._listaNegociacoes);\n\n                this._mensagem.texto = 'Negociações apagadas com sucesso!';\n                // this._mensagemView.update(this._mensagem);\n            })\n            .catch(error => this._mensagem.texto = error);\n    }\n\n    importa() {\n        NegociacaoService\n            .importa(this._listaNegociacoes.negociacoes)\n            .then(negociacoes => {\n                negociacoes.map(negociacao => {\n                    this._listaNegociacoes.adiciona(negociacao);\n                    this._mensagem.texto = 'Negociações importadas com sucesso.';\n                })\n            })\n            .catch(error => this._mensagem.texto = error);\n    }\n\n    persiste() {\n\n        let negociacao = {\n            data: this._inputData.value,\n            quantidade: this._inputQuantidade.value,\n            valor: this._inputValor.value\n        }\n\n        NegociacaoService.persisteNegociacaoServidor(negociacao)\n            .catch(error => console.log(error))\n            .then(data => console.log(data));\n    }\n\n    ordena(coluna) {\n        if (this._ordemAtual == coluna) {\n            this._listaNegociacoes.inverteOrdem();\n        } else {\n            this._listaNegociacoes.ordena((a, b) => a[coluna] - b[coluna]);\n        }\n        this._ordemAtual = coluna;\n    }\n\n    _criaNegociacao() {\n\n        return new Negociacao(\n            DateHelper.textoParaData(this._inputData.value),\n            parseInt(this._inputQuantidade.value),\n            parseFloat(this._inputValor.value)\n        );\n    }\n\n    _clearForm() {\n        this._inputQuantidade.value = 1;\n        this._inputData.value = '';\n        this._inputValor.value = 0.0;\n\n        this._inputData.focus();\n    }\n}\n\n//Making this class a singleton\nlet negociacaoController = new NegociacaoController();\n\nexport function currentInstance() {\n    return negociacaoController;\n}"]}