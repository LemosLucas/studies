{"version":3,"sources":["../../../app-src/domain/negociacao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","e","onerror","console","log","target","error","negociacoes","cursor","openCursor","atual","result","value","_data","_quantidade","_valor","push","clear"],"mappings":";;;;;;;;;;;;;;;AAASA,MAAAA,U,iBAAAA,U;;;+BAEIC,a;;;AAET,+BAAYC,UAAZ,EAAwB;AAAA;;AAEpB,eAAKC,WAAL,GAAmBD,UAAnB;AACA,eAAKE,MAAL,GAAc,aAAd;AACH;;;;mCAGQC,U,EAAY;AAAA;;AAEjB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAEpC,kBAAMC,OAAO,GAAG,KAAI,CAACN,WAAL,CACXO,WADW,CACC,CAAC,KAAI,CAACN,MAAN,CADD,EACgB,WADhB,EAEXO,WAFW,CAEC,KAAI,CAACP,MAFN,EAGXQ,GAHW,CAGPP,UAHO,CAAhB;;AAKAI,cAAAA,OAAO,CAACI,SAAR,GAAoB,UAAAC,CAAC;AAAA,uBAAIP,OAAO,EAAX;AAAA,eAArB;;AACAE,cAAAA,OAAO,CAACM,OAAR,GAAkB,UAAAD,CAAC,EAAI;AAEnBE,gBAAAA,OAAO,CAACC,GAAR,CAAYH,CAAC,CAACI,MAAF,CAASC,KAArB;AACAX,gBAAAA,MAAM,CAAC,sCAAD,CAAN;AACH,eAJD;AAKH,aAbM,CAAP;AAcH;;;uCACY;AAAA;;AAET,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAEpC,kBAAMY,WAAW,GAAG,EAApB;;AAEA,kBAAMC,MAAM,GAAG,MAAI,CAAClB,WAAL,CACVO,WADU,CACE,CAAC,MAAI,CAACN,MAAN,CADF,EACiB,WADjB,EAEVO,WAFU,CAEE,MAAI,CAACP,MAFP,EAGVkB,UAHU,EAAf;;AAKAD,cAAAA,MAAM,CAACR,SAAP,GAAmB,UAAAC,CAAC,EAAI;AAEpB,oBAAMS,KAAK,GAAGT,CAAC,CAACI,MAAF,CAASM,MAAvB;;AAEA,oBAAID,KAAJ,EAAW;AAEP,sBAAMlB,UAAU,GAAG,IAAIL,UAAJ,CACfuB,KAAK,CAACE,KAAN,CAAYC,KADG,EAEfH,KAAK,CAACE,KAAN,CAAYE,WAFG,EAGfJ,KAAK,CAACE,KAAN,CAAYG,MAHG,CAAnB;AAKAR,kBAAAA,WAAW,CAACS,IAAZ,CAAiBxB,UAAjB;AACAkB,kBAAAA,KAAK,YAAL;AAEH,iBAVD,MAUO;AAEHhB,kBAAAA,OAAO,CAACa,WAAD,CAAP;AACH;AACJ,eAlBD;;AAoBAC,cAAAA,MAAM,CAACN,OAAP,GAAiB,UAAAD,CAAC,EAAI;AAClBE,gBAAAA,OAAO,CAACC,GAAR,CAAYH,CAAC,CAACI,MAAF,CAASC,KAArB;AACAX,gBAAAA,MAAM,CAAC,yCAAD,CAAN;AACH,eAHD;AAKH,aAlCM,CAAP;AAmCH;;;uCAEY;AAAA;;AAET,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAEpC,kBAAMC,OAAO,GAAG,MAAI,CAACN,WAAL,CACXO,WADW,CACC,CAAC,MAAI,CAACN,MAAN,CADD,EACgB,WADhB,EAEXO,WAFW,CAEC,MAAI,CAACP,MAFN,EAGX0B,KAHW,EAAhB;;AAKArB,cAAAA,OAAO,CAACI,SAAR,GAAoB,UAAAC,CAAC;AAAA,uBAAIP,OAAO,EAAX;AAAA,eAArB;;AAEAE,cAAAA,OAAO,CAACM,OAAR,GAAkB,UAAAD,CAAC,EAAI;AACnBE,gBAAAA,OAAO,CAACC,GAAR,CAAYH,CAAC,CAACI,MAAF,CAASC,KAArB;AACAX,gBAAAA,MAAM,CAAC,wCAAD,CAAN;AACH,eAHD;AAKH,aAdM,CAAP;AAeH","sourcesContent":["import { Negociacao } from './Negociacao.js';\n\nexport class NegociacaoDao {\n\n    constructor(connection) {\n\n        this._connection = connection;\n        this._store = 'negociacoes';\n    }\n\n\n    adiciona(negociacao) {\n\n        return new Promise((resolve, reject) => {\n\n            const request = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .add(negociacao);\n\n            request.onsuccess = e => resolve();\n            request.onerror = e => {\n\n                console.log(e.target.error);\n                reject('Não foi possível salvar a negociação');\n            }\n        });\n    }\n    listaTodos() {\n\n        return new Promise((resolve, reject) => {\n\n            const negociacoes = [];\n\n            const cursor = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .openCursor();\n\n            cursor.onsuccess = e => {\n\n                const atual = e.target.result;\n\n                if (atual) {\n\n                    const negociacao = new Negociacao(\n                        atual.value._data,\n                        atual.value._quantidade,\n                        atual.value._valor);\n\n                    negociacoes.push(negociacao);\n                    atual.continue();\n\n                } else {\n\n                    resolve(negociacoes);\n                }\n            };\n\n            cursor.onerror = e => {\n                console.log(e.target.error);\n                reject('Não foi possível listar nas negociações');\n            }\n\n        });\n    }\n\n    apagaTodos() {\n\n        return new Promise((resolve, reject) => {\n\n            const request = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .clear();\n\n            request.onsuccess = e => resolve();\n\n            request.onerror = e => {\n                console.log(e.target.error);\n                reject('Não foi possível apagar as negociações');                \n            };\n\n        });\n    }    \n}"],"file":"NegociacaoDao.js"}