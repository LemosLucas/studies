{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;AAAMA,MAAAA,M,GAAS,CAAC,aAAD,C;AACXC,MAAAA,U,GAAa,I;AACbC,MAAAA,K,GAAQ,I;;mCAECC,iB;;;AAET,qCAAc;AAAA;;AAEV,gBAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACH;;;;0CAEsB;AAEnB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAEpC,kBAAIN,UAAJ,EAAgB,OAAOK,OAAO,CAACL,UAAD,CAAd;AAEhB,kBAAMO,WAAW,GAAGC,SAAS,CAACC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEAF,cAAAA,WAAW,CAACG,eAAZ,GAA8B,UAAAC,CAAC,EAAI;AAE/BT,gBAAAA,iBAAiB,CAACU,aAAlB,CAAgCD,CAAC,CAACE,MAAF,CAASC,MAAzC;AAEH,eAJD;;AAMAP,cAAAA,WAAW,CAACQ,SAAZ,GAAwB,UAAAJ,CAAC,EAAI;AAEzBX,gBAAAA,UAAU,GAAGW,CAAC,CAACE,MAAF,CAASC,MAAtB;AAEAb,gBAAAA,KAAK,GAAGD,UAAU,CAACC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;;AAEAA,gBAAAA,UAAU,CAACC,KAAX,GAAmB,YAAM;AACrB,wBAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,iBAFD;;AAIAE,gBAAAA,OAAO,CAACM,CAAC,CAACE,MAAF,CAASC,MAAV,CAAP;AAEH,eAZD;;AAcAP,cAAAA,WAAW,CAACU,OAAZ,GAAsB,UAAAN,CAAC,EAAI;AAEvBO,gBAAAA,OAAO,CAACC,GAAR,CAAYR,CAAC,CAACE,MAAF,CAASO,KAArB;AACAd,gBAAAA,MAAM,CAACK,CAAC,CAACE,MAAF,CAASO,KAAT,CAAeC,IAAhB,CAAN;AAEH,eALD;AAOH,aAjCM,CAAP;AAkCH;;;wCAEoBrB,U,EAAY;AAE7BD,YAAAA,MAAM,CAACuB,OAAP,CAAe,UAAAC,KAAK,EAAI;AAEpB,kBAAIvB,UAAU,CAACwB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EACIvB,UAAU,CAAC0B,iBAAX,CAA6BH,KAA7B;AAEJvB,cAAAA,UAAU,CAAC2B,iBAAX,CAA6BJ,KAA7B,EAAoC;AAAEK,gBAAAA,aAAa,EAAE;AAAjB,eAApC;AACH,aAND;AAOH;;;4CAEwB;AAErB,gBAAI5B,UAAJ,EAAgB;AACZC,cAAAA,KAAK;AACR;AACJ","sourcesContent":["const stores = ['negociacoes'];\nlet connection = null;\nlet close = null;\n\nexport class ConnectionFactory {\n\n    constructor() {\n\n        throw new Error('Não é possível criar instâncias dessa classe');\n    }\n\n    static getConnection() {\n\n        return new Promise((resolve, reject) => {\n\n            if (connection) return resolve(connection);\n\n            const openRequest = indexedDB.open('jscangaceiro', 2);\n\n            openRequest.onupgradeneeded = e => {\n\n                ConnectionFactory._createStores(e.target.result);\n\n            };\n\n            openRequest.onsuccess = e => {\n\n                connection = e.target.result;\n\n                close = connection.close.bind(connection);\n\n                connection.close = () => {\n                    throw new Error('Você não pode fechar diretamente a conexão');\n                };\n\n                resolve(e.target.result);\n\n            };\n\n            openRequest.onerror = e => {\n\n                console.log(e.target.error)\n                reject(e.target.error.name)\n\n            };\n\n        });\n    }\n\n    static _createStores(connection) {\n\n        stores.forEach(store => {\n\n            if (connection.objectStoreNames.contains(store))\n                connection.deleteObjectStore(store);\n\n            connection.createObjectStore(store, { autoIncrement: true });\n        });\n    }\n\n    static closeConnection() {\n\n        if (connection) {\n            close();\n        }\n    }\n}\n\n"],"file":"ConnectionFactory.js"}